using System.Diagnostics.Contracts;
using System.Text;

public class Sudoku_Solver
{
    [Theory]
    [InlineData(
        "["
        + "['7','.','.','.','4','.','.','.','.'],"
        + "['.','.','.','8','6','5','.','.','.'],"
        + "['.','1','.','2','.','.','.','.','.'],"
        + "['.','.','.','.','.','9','.','.','.'],"
        + "['.','.','.','.','5','.','5','.','.'],"
        + "['.','.','.','.','.','.','.','.','.'],"
        + "['.','.','.','.','.','.','2','.','.'],"
        + "['.','.','.','.','.','.','.','.','.'],"
        + "['.','.','.','.','.','.','.','.','.']]",
        false)]
    [InlineData(
        "[['.','.','.','.','5','.','.','1','.'],"
        + "['.','4','.','3','.','.','.','.','.'],"
        + "['.','.','.','.','.','3','.','.','1'],"
        + "['8','.','.','.','.','.','.','2','.'],"
        + "['.','.','2','.','7','.','.','.','.'],"
        + "['.','1','5','.','.','.','.','.','.'],"
        + "['.','.','.','.','.','2','.','.','.'],"
        + "['.','2','.','9','.','.','.','.','.'],"
        + "['.','.','4','.','.','.','.','.','.']]",
        false)]
    [InlineData(
        "[['5','3','.','.','7','.','.','.','.'],"
        + "['6','.','.','1','9','5','.','.','.'],"
        + "['.','9','8','.','.','.','.','6','.'],"
        + "['8','.','.','.','6','.','.','.','3'],"
        + "['4','.','.','8','.','3','.','.','1'],"
        + "['7','.','.','.','2','.','.','.','6'],"
        + "['.','6','.','.','.','.','2','8','.'],"
        + "['.','.','.','4','1','9','.','.','5'],"
        + "['.','.','.','.','8','.','.','7','9']]",
        true)]
    public void Test(string arr, bool result)
    {
        var s = new Solution();
        var board = ArrayUtils.CharArrayFromStr(arr);
        var ff = ArrayUtils.FormatArray(board);
        s.IsValidSudoku(board).ShouldBe(result);
    }
}

public class Solution
{
    public bool IsValidSudoku(char[][] board)
    {
        var hashSet = new HashSet<int>();

        for (int y = 1; y <= 9; y++)
        {
            for (int x = 1; x <= 9; x++)
            {
                var val = board[y - 1][x - 1];

                if (val == '.')
                    continue;

                var hor = 10 * x + val;

                if (!hashSet.Add(hor))
                {
                    return false;
                }

                var vert = 100 * y + val;

                if (!hashSet.Add(vert))
                {
                    return false;
                }

                var grid = 1000 * ((y - 1) / 3 + 1) + 100 * ((x - 1) / 3 + 1) + val;

                if (!hashSet.Add(grid))
                {
                    return false;
                }
            }
        }

        return true;
    }
}
